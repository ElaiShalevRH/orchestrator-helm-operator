{{- $ns := .Values.orchestrator.namespace }}
{{- if .Values.sonataFlowOperator.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-cr-sonataflow
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-cr-sonataflow
  namespace: {{ .Values.rhdhOperator.subscription.namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"    
rules:
  - apiGroups: 
    - sonataflow.org
    resources:
    - sonataflowplatforms
    - sonataflows
    - sonataflowclusterplatforms
    verbs:
    - get 
    - create
    - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-cr-sonataflow
  namespace: {{ .Values.rhdhOperator.subscription.namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"    
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-cr-sonataflow
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ .Release.Name }}-cr-sonataflow
  apiGroup: rbac.authorization.k8s.io
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-sonataflow-manifest
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"    
data:
  "manifest.yaml": |
{{- if .Values.orchestrator.devmode }}
    apiVersion: sonataflow.org/v1alpha08
    kind: SonataFlowPlatform
    metadata:
      name: sonataflow-platform
      namespace: {{ $ns }}
    spec:
      build:
        template:
          resources:
            requests:
              memory: {{ .Values.orchestrator.sonataPlatform.resources.requests.memory }}
              cpu: {{ .Values.orchestrator.sonataPlatform.resources.requests.cpu }}
            limits:
              memory: {{ .Values.orchestrator.sonataPlatform.resources.limits.memory }}
              cpu: {{ .Values.orchestrator.sonataPlatform.resources.limits.cpu }}
      services:
        dataIndex:
          enabled: true
        jobService:
          enabled: true
{{- else }}
    apiVersion: sonataflow.org/v1alpha08
    kind: SonataFlowPlatform
    metadata:
      name: sonataflow-platform
      namespace: {{ $ns }}
    spec:
      build:
        template:
          resources:
            requests:
              memory: {{ .Values.orchestrator.sonataPlatform.resources.requests.memory }}
              cpu: {{ .Values.orchestrator.sonataPlatform.resources.requests.cpu }}
            limits:
              memory: {{ .Values.orchestrator.sonataPlatform.resources.limits.memory }}
              cpu: {{ .Values.orchestrator.sonataPlatform.resources.limits.cpu }}
      services:
        dataIndex:
          enabled: true
          podTemplate:
            container:
              image: {{ .Values.orchestrator.sonataPlatform.dataIndex.image }} 
          persistence:
            postgresql:
              secretRef:
                name: {{ .Values.postgres.authSecret.name }}
                userKey: {{ .Values.postgres.authSecret.userKey }}
                passwordKey: {{ .Values.postgres.authSecret.passwordKey }}
              serviceRef:
                name: {{ .Values.postgres.serviceName }}
                namespace: {{ .Values.postgres.serviceNamespace }}
        jobService:
          enabled: true
          podTemplate:
            container:
              image: {{ .Values.orchestrator.sonataPlatform.jobService.image }} 
          persistence:
            postgresql:
              secretRef:
                name: {{ .Values.postgres.authSecret.name }}
                userKey: {{ .Values.postgres.authSecret.userKey }}
                passwordKey: {{ .Values.postgres.authSecret.passwordKey }}
              serviceRef:
                name: {{ .Values.postgres.serviceName }}
                namespace: {{ .Values.postgres.serviceNamespace }}
{{- end }}
    ---
    apiVersion: sonataflow.org/v1alpha08
    kind: SonataFlowClusterPlatform
    metadata:
      name: cluster-platform
      annotations:
        "helm.sh/hook": post-install
        "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
        "helm.sh/hook-weight": "0"   
    spec:
      platformRef:
        name: sonataflow-platform
        namespace: {{ $ns }}
    ---
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-cr-backstage
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded # add ,hook-failed once verified
    "helm.sh/hook-weight": "1"    
spec:
  template:
    metadata:
      name: {{ .Release.Name }}-cr-backstage
    spec:
      serviceAccountName: {{ .Release.Name }}-cr-backstage
      containers:
      - name: deploy-manifest
        image: registry.redhat.io/openshift4/ose-cli:latest
        command:
          - "bin/bash"
          - "-c"
        args:
          - |
            echo "Deploy Knative Serving CR with retries"
            count=10
            while [[ count -ne 0 ]]
            do
              kubectl apply -f /tmp/manifest/manifest.yaml
              if [[ $? -eq 0 ]]; then
                exit 0
              fi
              ((count++))
              sleep 1
            done
            echo "Job finished"
        volumeMounts:
        - name: manifest
          mountPath: /tmp/manifest/
          readOnly: true
      volumes:
      - name: manifest
        configMap:
          name: backstage-manifest
          items:
          - key: manifest.yaml
            path: manifest.yaml
      restartPolicy: Never 
{{- end }}