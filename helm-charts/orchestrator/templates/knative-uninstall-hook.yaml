{{- if .Values.serverlessOperator.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-knative-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-1"  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-knative-cleanup
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: 
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-knative-cleanup
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-knative-cleanup
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-knative-cleanup
  apiGroup: rbac.authorization.k8s.io 
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-knative-eventing
  namespace: knative-eventing
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"    
rules:
  - apiGroups:
    - operator.knative.dev
    resources:
    - knativeeventings
    verbs:
    - get
    - list
    - delete
    - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-knative-eventing
  namespace: knative-eventing
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"    
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-knative-cleanup
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ .Release.Name }}-knative-eventing
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-knative-serving
  namespace: knative-serving
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"    
rules:
  - apiGroups:
    - operator.knative.dev
    resources:
    - knativeservings
    verbs:
    - get
    - list
    - delete
    - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-knative-serving
  namespace: knative-serving
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "0"    
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-knative-cleanup
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ .Release.Name }}-knative-serving
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-knative-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded # add ,hook-failed once verified
    "helm.sh/hook-weight": "1"    
spec:
  template:
    metadata:
      name: {{ .Release.Name }}-knative-cleanup
    spec:
      serviceAccountName: {{ .Release.Name }}-knative-cleanup
      containers:
        - name: cleanup
          image: registry.redhat.io/openshift4/ose-cli:latest
          command:
            - "bin/bash"
            - "-c"
          args:
            - |
              echo "Cleanup Job started"
              kubectl get crd knativeeventings.operator.knative.dev
              if [ $? -eq 0 ]; then
                kubectl get -n knative-eventing knativeeventings.operator.knative.dev knative-eventing
                if [ $? -eq 0 ]; then
                  kubectl patch knativeeventings.operator.knative.dev -n knative-eventing knative-eventing --type='json' -p '[{"op": "replace", "path": "/metadata/finalizers", "value": null}]'
                  kubectl delete -n knative-eventing knativeeventings.operator.knative.dev knative-eventing
                fi
              fi
              kubectl get crd knativeservings.operator.knative.dev
              if [ $? -eq 0 ]; then
                kubectl get -n knative-serving knativeservings.operator.knative.dev knative-serving
                if [ $? -eq 0 ]; then
                  kubectl patch knativeservings.operator.knative.dev -n knative-serving knative-serving --type='json' -p '[{"op": "replace", "path": "/metadata/finalizers", "value": null}]'
                  kubectl delete -n knative-serving knativeservings.operator.knative.dev knative-serving
                fi
              fi
              echo "Cleanup Job finished"
      restartPolicy: Never
{{- end }}